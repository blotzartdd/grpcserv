// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: bankProto.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	BankProto_CreateAccount_FullMethodName       = "/proto.BankProto/CreateAccount"
	BankProto_DeleteAccount_FullMethodName       = "/proto.BankProto/DeleteAccount"
	BankProto_ChangeAccountName_FullMethodName   = "/proto.BankProto/ChangeAccountName"
	BankProto_ChangeAccountAmount_FullMethodName = "/proto.BankProto/ChangeAccountAmount"
	BankProto_GetAccount_FullMethodName          = "/proto.BankProto/GetAccount"
)

// BankProtoClient is the client API for BankProto service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BankProtoClient interface {
	CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error)
	DeleteAccount(ctx context.Context, in *DeleteAccountRequest, opts ...grpc.CallOption) (*DeleteAccountResponse, error)
	ChangeAccountName(ctx context.Context, in *ChangeAccountNameRequest, opts ...grpc.CallOption) (*ChangeAccountNameResponse, error)
	ChangeAccountAmount(ctx context.Context, in *ChangeAccountAmountRequest, opts ...grpc.CallOption) (*ChangeAccountAmountResponse, error)
	GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*GetAccountResponse, error)
}

type bankProtoClient struct {
	cc grpc.ClientConnInterface
}

func NewBankProtoClient(cc grpc.ClientConnInterface) BankProtoClient {
	return &bankProtoClient{cc}
}

func (c *bankProtoClient) CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAccountResponse)
	err := c.cc.Invoke(ctx, BankProto_CreateAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankProtoClient) DeleteAccount(ctx context.Context, in *DeleteAccountRequest, opts ...grpc.CallOption) (*DeleteAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAccountResponse)
	err := c.cc.Invoke(ctx, BankProto_DeleteAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankProtoClient) ChangeAccountName(ctx context.Context, in *ChangeAccountNameRequest, opts ...grpc.CallOption) (*ChangeAccountNameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangeAccountNameResponse)
	err := c.cc.Invoke(ctx, BankProto_ChangeAccountName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankProtoClient) ChangeAccountAmount(ctx context.Context, in *ChangeAccountAmountRequest, opts ...grpc.CallOption) (*ChangeAccountAmountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangeAccountAmountResponse)
	err := c.cc.Invoke(ctx, BankProto_ChangeAccountAmount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankProtoClient) GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*GetAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAccountResponse)
	err := c.cc.Invoke(ctx, BankProto_GetAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BankProtoServer is the server API for BankProto service.
// All implementations must embed UnimplementedBankProtoServer
// for forward compatibility
type BankProtoServer interface {
	CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error)
	DeleteAccount(context.Context, *DeleteAccountRequest) (*DeleteAccountResponse, error)
	ChangeAccountName(context.Context, *ChangeAccountNameRequest) (*ChangeAccountNameResponse, error)
	ChangeAccountAmount(context.Context, *ChangeAccountAmountRequest) (*ChangeAccountAmountResponse, error)
	GetAccount(context.Context, *GetAccountRequest) (*GetAccountResponse, error)
	mustEmbedUnimplementedBankProtoServer()
}

// UnimplementedBankProtoServer must be embedded to have forward compatible implementations.
type UnimplementedBankProtoServer struct {
}

func (UnimplementedBankProtoServer) CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (UnimplementedBankProtoServer) DeleteAccount(context.Context, *DeleteAccountRequest) (*DeleteAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccount not implemented")
}
func (UnimplementedBankProtoServer) ChangeAccountName(context.Context, *ChangeAccountNameRequest) (*ChangeAccountNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeAccountName not implemented")
}
func (UnimplementedBankProtoServer) ChangeAccountAmount(context.Context, *ChangeAccountAmountRequest) (*ChangeAccountAmountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeAccountAmount not implemented")
}
func (UnimplementedBankProtoServer) GetAccount(context.Context, *GetAccountRequest) (*GetAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (UnimplementedBankProtoServer) mustEmbedUnimplementedBankProtoServer() {}

// UnsafeBankProtoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BankProtoServer will
// result in compilation errors.
type UnsafeBankProtoServer interface {
	mustEmbedUnimplementedBankProtoServer()
}

func RegisterBankProtoServer(s grpc.ServiceRegistrar, srv BankProtoServer) {
	s.RegisterService(&BankProto_ServiceDesc, srv)
}

func _BankProto_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankProtoServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankProto_CreateAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankProtoServer).CreateAccount(ctx, req.(*CreateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankProto_DeleteAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankProtoServer).DeleteAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankProto_DeleteAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankProtoServer).DeleteAccount(ctx, req.(*DeleteAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankProto_ChangeAccountName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeAccountNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankProtoServer).ChangeAccountName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankProto_ChangeAccountName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankProtoServer).ChangeAccountName(ctx, req.(*ChangeAccountNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankProto_ChangeAccountAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeAccountAmountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankProtoServer).ChangeAccountAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankProto_ChangeAccountAmount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankProtoServer).ChangeAccountAmount(ctx, req.(*ChangeAccountAmountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankProto_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankProtoServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankProto_GetAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankProtoServer).GetAccount(ctx, req.(*GetAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BankProto_ServiceDesc is the grpc.ServiceDesc for BankProto service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BankProto_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.BankProto",
	HandlerType: (*BankProtoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAccount",
			Handler:    _BankProto_CreateAccount_Handler,
		},
		{
			MethodName: "DeleteAccount",
			Handler:    _BankProto_DeleteAccount_Handler,
		},
		{
			MethodName: "ChangeAccountName",
			Handler:    _BankProto_ChangeAccountName_Handler,
		},
		{
			MethodName: "ChangeAccountAmount",
			Handler:    _BankProto_ChangeAccountAmount_Handler,
		},
		{
			MethodName: "GetAccount",
			Handler:    _BankProto_GetAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bankProto.proto",
}
